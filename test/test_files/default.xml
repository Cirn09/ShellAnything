<?xml version="1.0" encoding="utf-8"?>
<!--
Help:
  ${selection.path} is the full path of the clicked element
  ${selection.parent.path} is the full path of the parent element
  ${selection.parent.filename} is the filename of the parent element
  ${selection.filename} is selection.filename (including file extension)
  ${selection.filename.noext} is selection.filename without file extension
  
  ${env.XYZ} refers to environment variable XYZ
  
  Property names must not contain spaces
  Property lists must be separated by ';' character
  File extension lists must be separated by ';' character
  
-->
<root>
  <shell>
  
    <menu separator="true" />
    
    <menu name="Copy to clipboard...">
      <icon path="C:\Windows\System32\shell32.dll" index="68" />
      <menu name="Full Path" description="Copy the selected file path(s) to the clipboard">
        <icon path="C:\Windows\System32\shell32.dll" index="165" />
        <actions>
          <clipboard value="${selection.path}"/>
        </actions>
      </menu>
      <menu name="Filename" description="Copy the selected filename(s) to the clipboard">
        <icon path="C:\Windows\System32\shell32.dll" index="2" />
        <actions>
          <clipboard value="${selection.filename}"/>
        </actions>
      </menu>
      <menu name="Filename (without extension)" description="Copy the selected filename(s) (without extension) to the clipboard">
        <icon path="C:\Windows\System32\shell32.dll" index="0" />
        <actions>
          <clipboard value="${selection.filename.noext}"/>
        </actions>
      </menu>
      <menu name="Parent Folder">
        <icon path="C:\Windows\System32\shell32.dll" index="3" />
        <actions>
          <clipboard value="${selection.parent.path}"/>
        </actions>
      </menu>
    </menu>
    
    <menu name="Command line from here...">
      <icon path="C:\Windows\System32\cmd.exe" index="0" />
      <visibility maxfiles="0" maxfolders="1" />
      <actions>
        <exec path="${env.ComSpec}" basedir="&quot;${selection.path}&quot;" />
      </actions>
    </menu>
    
    <menu name="WinDirStat">
      <icon path="C:\Program Files (x86)\WinDirStat\windirstat.exe" index="0" />
      <visibility maxfiles="0" maxfolders="1" />
      <actions>
        <exec path="C:\Program Files (x86)\WinDirStat\windirstat.exe" arguments="&quot;${selection.path}&quot;" />
      </actions>
    </menu>
    
    <menu name="Run with parameters..." description="Run the selected executable with parameters">
      <icon path="C:\Windows\System32\shell32.dll" index="76" />
      <visibility maxfiles="1" maxfolders="0" fileextensions="com;exe;bat;cmd" />
      <actions>
        <prompt name="myarguments" title="Please enter the command line parameters" />
        <exec path="${selection.path}" arguments="${myarguments}" />
      </actions>
    </menu>

    <menu name="Foo Service">
      <icon path="C:\Windows\System32\cmmon32.exe" index="0" />
      <menu name="Stop">
        <validity properties="services.foo.started" />
        <icon path="C:\Windows\System32\imageres.dll" index="100" />
        <actions>
          <exec path="C:\Program Files (x86)\FooSoftwares\stop.exe" />
        </actions>
      </menu>
      <menu name="Start">
        <validity properties="services.foo.stopped" />
        <icon path="C:\Windows\System32\imageres.dll" index="101" />
        <actions>
          <exec path="C:\Program Files (x86)\FooSoftwares\start.exe" />
          <property name="services.foo.started" value="true" />
        </actions>
      </menu>
      <menu name="Restart">
        <icon path="C:\Windows\System32\wmploc.dll" index="151" />
        <actions>
          <exec path="C:\Program Files (x86)\FooSoftwares\stop.exe" />
          <exec path="C:\Program Files (x86)\FooSoftwares\start.exe" />
          <property name="services.foo.started" value="true" />
          <property name="services.foo.stopped" value="" />
        </actions>
      </menu>
      
      <!--Split commands that are for the same purpose-->
      <menu separator="true" />
      
      <menu name="Connect">
        <icon path="C:\Windows\System32\shell32.dll" index="44" />
        <actions>
          <exec path="C:\Program Files (x86)\FooSoftwares\foo.exe" arguments="/connect" />
        </actions>
      </menu>
      <menu name="Update">
        <!--<icon path="C:\Windows\System32\imageres.dll" index="194" />-->
        <icon path="C:\Windows\System32\shell32.dll" index="46" />
        <actions>
          <exec path="C:\Program Files (x86)\FooSoftwares\foo.exe" arguments="/update" />
        </actions>
      </menu>
    </menu>

    <!--Split before winzip commands-->
    <menu name="Winzip">
      <icon path="C:\Windows\System32\zipfldr.dll" index="0" />
      <menu name="Compress to '${selection.filename}.zip'">
        <visibility maxfiles="1" maxfolders="1" />
        <actions>
          <exec path="C:\Program Files (x86)\WinZip\winzip32.exe" arguments="-a -r &quot;${selection.path}\${selection.filename}.zip&quot; &quot;${selection.path}&quot;" />
        </actions>
      </menu>
      <menu name="Extract to folder ${selection.filename}">
        <visibility maxfiles="1" maxfolders="0" fileextensions="zip" />
        <actions>
          <exec path="C:\Program Files (x86)\WinZip\winzip32.exe" arguments="-e &quot;${selection.path}&quot; &quot;${selection.parent.path}\${selection.filename.noext}&quot;" />
        </actions>
      </menu>
      <menu name="Extract here">
        <visibility maxfiles="1" maxfolders="0" fileextensions="zip" />
        <actions>
          <exec path="C:\Program Files (x86)\WinZip\winzip32.exe" arguments="-e &quot;${selection.path}&quot; &quot;${selection.parent.path}&quot;" />
        </actions>
      </menu>
    </menu>


    <!--Show file selection or compare capabilities-->
    <menu name="Compare">
      <visibility maxfiles="1" maxfolders="1" />
      <icon path="C:\Windows\System32\dsuiext.dll" index="32" />
      <menu name="Select file '${selection.filename}'">
        <actions>
          <property name="compare.first.selection.path"     value="${selection.path}" />
          <property name="compare.first.selection.filename" value="${selection.filename}" />
        </actions>
      </menu>
      <menu name="Compare with '${compare.first.selection.filename}' (text)">
        <icon path="C:\Windows\System32\imageres.dll" index="14" />
        <visibility properties="compare.first.selection.filename" />
        <actions>
          <exec path="${env.ComSpec}" arguments="/K FC /L &quot;${compare.first.selection.path}&quot; &quot;${selection.path}&quot;" />

          <!--Reset the properties now that compare is complete-->
          <property name="compare.first.selection.path"     value="" />
          <property name="compare.first.selection.filename" value="" />
        </actions>
      </menu>
      <menu name="Compare with '${compare.first.selection.filename}' (binary)">
        <icon path="C:\Windows\System32\compstui.dll" index="39" />
        <visibility properties="compare.first.selection.filename" />
        <actions>
          <exec path="${env.ComSpec}" arguments="/K FC /B &quot;${compare.first.selection.path}&quot; &quot;${selection.path}&quot;" />

          <!--Reset the properties now that compare is complete-->
          <property name="compare.first.selection.path"     value="" />
          <property name="compare.first.selection.filename" value="" />
        </actions>
      </menu>
    </menu>

    <!--Low level find file-->
    <menu name="Find file...">
      <icon path="C:\Windows\System32\shell32.dll" index="22" />
      <visibility maxfiles="0" maxfolders="1" />
      <actions>
        <prompt name="findpattern" title="Please enter the find wildcard pattern..." />
        <exec path="${env.ComSpec}" basedir="${selection.path}" arguments="/K dir /a /s /b &quot;${findpattern}&quot;" />
        <property name="findpattern" value="" />
      </actions>
    </menu>
    <menu name="Find in files...">
      <icon path="C:\Windows\System32\shell32.dll" index="55" />
      <visibility maxfiles="0" maxfolders="1" />
      <actions>
        <prompt name="filepattern" title="Please enter the file wildcard pattern..." />
        <prompt name="textpattern" title="Please enter the searched text..." />
        <exec path="${env.ComSpec}" basedir="${selection.path}" arguments="/K FINDSTR /S &quot;/C:${textpattern}&quot; ${filepattern}" />
        <property name="filepattern" value="" />
        <property name="textpattern" value="" />
      </actions>
    </menu>

    <!-- Open files that are not executables -->
    <menu name="MySoftware">
      <icon path="C:\windows\system32\dccw.exe" index="0" />
      <menu name="README">
        <!--<icon path="C:\Program Files\Windows NT\Accessories\wordpad.exe" index="0" />-->
        <icon path="C:\windows\system32\write.exe" index="0" />
        <actions>
          <open path="C:\Program Files (x86)\MySoftware\README.pdf" />
        </actions>
      </menu>
      <menu name="About">
        <icon path="C:\Windows\System32\imageres.dll" index="102" />
        <actions>
          <open path="C:\Program Files (x86)\MySoftware\about.htm" />
        </actions>
      </menu>
    </menu>
    
    <!-- Different type of checksum -->
    <menu name="Checksum">
      <icon path="C:\Windows\System32\shell32.dll" index="104" />
      <visibility maxfiles="1" maxfolders="0" />
      <menu name="MD5">
        <actions>
          <exec path="${env.ComSpec}" arguments="/K CertUtil -hashfile &quot;${selection.path}&quot; MD5" />
        </actions>
      </menu>
      <menu name="SHA1">
        <actions>
          <exec path="${env.ComSpec}" arguments="/K CertUtil -hashfile &quot;${selection.path}&quot; SHA1" />
        </actions>
      </menu>
      <menu name="SHA256">
        <actions>
          <exec path="${env.ComSpec}" arguments="/K CertUtil -hashfile &quot;${selection.path}&quot; SHA256" />
        </actions>
      </menu>
      <menu name="SHA512">
        <actions>
          <exec path="${env.ComSpec}" arguments="/K CertUtil -hashfile &quot;${selection.path}&quot; SHA512" />
        </actions>
      </menu>
    </menu>

    <!-- symbolic links -->
    <menu name="Symbolic Links ">
      <icon path="C:\Windows\System32\imageres.dll" index="154" />
      <!-- See also https://stackoverflow.com/questions/19098101/how-to-open-an-elevated-cmd-using-command-line-for-windows -->
      <visibility maxfiles="0" maxfolders="1" />
      <menu name="Cancel link creation." description="">
        <visibility properties="symbolic.source.path" />
        <actions>
          <property name="symbolic.source.path"     value="" />
          <property name="symbolic.source.filename" value="" />
        </actions>
      </menu>
      <menu name="Set as source...">
        <actions>
          <property name="symbolic.source.path"     value="${selection.path}" />
          <property name="symbolic.source.filename" value="${selection.filename}" />
        </actions>
      </menu>
      <menu name="Create '${symbolic.source.filename}' link as..." description="Creates a symbolic link.">
        <visibility properties="symbolic.source.path" />
        <menu name="Symbolic Link" description="Creates a directory symbolic link.">
          <visibility properties="symbolic.source.path" />
          <actions>
            <exec path="powershell.exe" arguments="-Command &quot;Start-Process cmd -ArgumentList '/K mklink /D \&quot;${selection.path}\${symbolic.source.filename}\&quot; \&quot;${symbolic.source.path}\&quot;' -Verb RunAs&quot;" />
          </actions>
        </menu>
        <menu name="Hard Link" description="Creates a directory hard link.">
          <visibility properties="symbolic.source.path" />
          <actions>
            <exec path="powershell.exe" arguments="-Command &quot;Start-Process cmd -ArgumentList '/K mklink /H \&quot;${selection.path}\${symbolic.source.filename}\&quot; \&quot;${symbolic.source.path}\&quot;' -Verb RunAs&quot;" />
          </actions>
        </menu>
        <menu name="Junction" description="Creates a directory junction.">
          <visibility properties="symbolic.source.path" />
          <actions>
            <exec path="powershell.exe" arguments="-Command &quot;Start-Process cmd -ArgumentList '/K mklink /J \&quot;${selection.path}\${symbolic.source.filename}\&quot; \&quot;${symbolic.source.path}\&quot;' -Verb RunAs&quot;" />
          </actions>
        </menu>
      </menu>
    </menu>

    <!-- Microsoft Office 2007 -->
    <menu name="Microsoft Office 2007">
      <menu name="Open as READ-ONLY">
        <icon path="C:\Program Files (x86)\Microsoft Office\Office12\EXCEL.EXE" index="0" />
        <visibility maxfiles="1" maxfolders="0" fileextensions="XLS;XLSX" />
        <actions>
          <exec path="C:\Program Files (x86)\Microsoft Office\Office12\EXCEL.EXE" arguments="/r &quot;${selection.path}&quot;" />
        </actions>
      </menu>
      <menu name="Open as READ-ONLY">
        <icon path="C:\Program Files (x86)\Microsoft Office\Office12\WINWORD.EXE" index="0" />
        <visibility maxfiles="1" maxfolders="0" fileextensions="DOC;DOCX" />
        <actions>
          <!-- Microsoft Word does not support opening a document in READONLY mode from the command line.
          It can be implemented using DDE (https://en.wikibooks.org/wiki/Microsoft_Office/Opening_a_Word_File_as_Read_Only) but DDE is not supported by this application.
          An ugly workaround is to temporary modify the file's attribute to READONLY, open the document with Microsoft Word, 
          and then remove the READONLY attribute a few seconds later.
          -->
          <!-- Sleep in a batch file:
            https://stackoverflow.com/questions/1672338/how-to-sleep-for-5-seconds-in-a-batch-file-cmd
            powershell -command "Start-Sleep -s 5"
            timeout 5
            echo Wait for Microsoft Word to open your document and && pause
            -->
          <exec path="${env.ComSpec}" arguments="/C title &quot;Open as READ-ONLY&quot; &amp;&amp; attrib +r &quot;${selection.path}&quot; &amp;&amp; &quot;C:\Program Files (x86)\Microsoft Office\Office12\WINWORD.EXE&quot; &quot;${selection.path}&quot; &amp;&amp; timeout 5 &amp;&amp; attrib -r &quot;${selection.path}&quot;" />
        </actions>
      </menu>
      <menu name="Open as READ-ONLY">
        <icon path="C:\Program Files (x86)\Microsoft Office\Office12\POWERPNT.EXE" index="0" />
        <visibility maxfiles="1" maxfolders="0" fileextensions="PPT;PPTX" />
        <actions>
          <!-- Microsoft PowerPoint does not support opening a document in READONLY mode from the command line.
          However, the same strategy cannot be used exactly as with Microsoft Word because 'POWERPNT.EXE' is a blocking command while 'WINWORD.EXE' is not.
          In other words, if we call POWERPNT.EXE, the application must exit before the 'timeout' and 'attrib' commands can be executed.
          Launching 'POWERPNT.EXE' with the START command 
          -->
          <exec path="${env.ComSpec}" arguments="/C title &quot;Open as READ-ONLY&quot; &amp;&amp; attrib +r &quot;${selection.path}&quot; &amp;&amp; START &quot;&quot; &quot;C:\Program Files (x86)\Microsoft Office\Office12\POWERPNT.EXE&quot; &quot;${selection.path}&quot; &amp;&amp; timeout 5 &amp;&amp; attrib -r &quot;${selection.path}&quot;" />
        </actions>
      </menu>
      <menu name="Open as READ-ONLY">
        <icon path="C:\Program Files (x86)\Microsoft Office\Office12\MSACCESS.EXE" index="0" />
        <visibility maxfiles="1" maxfolders="0" fileextensions="mdb" />
        <actions>
          <exec path="C:\Program Files (x86)\Microsoft Office\Office12\MSACCESS.EXE" arguments="/ro &quot;${selection.path}&quot;" />
        </actions>
      </menu>
    </menu>
    
    <menu separator="true" />
    
  </shell>
</root>