/**
 * This file was generated by bin2cpp v2.3.0
 * Copyright (C) 2013-2019 end2endzone.com. All rights reserved.
 * bin2cpp is open source software, see http://github.com/end2endzone/bin2cpp
 * Source code for file 'shellext.rgs', last modified 1555715270.
 * Do not modify this file.
 */
#include "shellext_registry_script.h"
#include <stdio.h> //for FILE
#include <string> //for memcpy
namespace bin2cpp
{
  class RegistryScriptFile : public virtual bin2cpp::File
  {
  public:
    RegistryScriptFile() { build(); }
    virtual ~RegistryScriptFile() {}
    virtual size_t getSize() const { return 2170; }
    virtual const char * getFilename() const { return "shellext.rgs"; }
    virtual const char * getBuffer() const { return mBuffer.c_str(); }
    void build()
    {
      mBuffer.clear();
      mBuffer.reserve(getSize()); //allocate all required memory at once to prevent reallocations
      mBuffer.append("HKCR\r\n{\r\n\tForceRemove ShellExtension.ShellAnything.1 = s \'ShellAnything Class\'\r\n\t{\r\n\t\tCLSID = s \'{B0D35103-86A1-471C-A653-E130E3439A3B}\'\r\n\t}\r\n\tForceRemove ShellExtension.ShellAnything = s \'ShellAnythi", 200);
      mBuffer.append("ng Class\'\r\n\t{\r\n\t\tCLSID = s \'{B0D35103-86A1-471C-A653-E130E3439A3B}\'\r\n\t\tCurVer = s \'ShellExtension.ShellAnything.1\'\r\n\t}\r\n\tNoRemove CLSID\r\n\t{\r\n\t\tForceRemove {B0D35103-86A1-471C-A653-E130E3439A3B} = s \'S", 200);
      mBuffer.append("hellAnything Class\'\r\n\t\t{\r\n\t\t\tProgID = s \'ShellExtension.ShellAnything.1\'\r\n\t\t\tVersionIndependentProgID = s \'ShellExtension.ShellAnything\'\r\n\t\t\tForceRemove \'Programmable\'\r\n\t\t\tInprocServer32 = s \'%MODULE%", 200);
      mBuffer.append("\'\r\n\t\t\t{\r\n\t\t\t\tval ThreadingModel = s \'Apartment\'\r\n\t\t\t}\r\n\t\t\t\'TypeLib\' = s \'{C0F6D726-56D2-4FF2-A0B7-A50BB10F6EC4}\'\r\n\t\t}\r\n\t}\r\n\tNoRemove *\r\n\t{\r\n\t\tNoRemove ShellEx\r\n\t\t{\r\n\t\t\tNoRemove ContextMenuHandlers\r\n\t\t", 200);
      mBuffer.append("\t{\r\n\t\t\t\tForceRemove ShellAnything = s \'{B0D35103-86A1-471C-A653-E130E3439A3B}\'\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tNoRemove Directory\r\n\t{\r\n\t\tNoRemove ShellEx\r\n\t\t{\r\n\t\t\tNoRemove ContextMenuHandlers\r\n\t\t\t{\r\n\t\t\t\tForceRemov", 200);
      mBuffer.append("e ShellAnything = s \'{B0D35103-86A1-471C-A653-E130E3439A3B}\'\r\n\t\t\t}\r\n\t\t\tNoRemove DragDropHandlers\r\n\t\t\t{\r\n\t\t\t\tForceRemove ShellAnything = s \'{B0D35103-86A1-471C-A653-E130E3439A3B}\'\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tNo", 200);
      mBuffer.append("Remove Directory\r\n\t{\r\n\t\tNoRemove Background\r\n\t\t{\r\n\t\t\tNoRemove ShellEx\r\n\t\t\t{\r\n\t\t\t\tNoRemove ContextMenuHandlers\r\n\t\t\t\t{\r\n\t\t\t\t\tForceRemove ShellAnything = s \'{B0D35103-86A1-471C-A653-E130E3439A3B}\'\r\n\t\t\t\t}", 200);
      mBuffer.append("\r\n\t\t\t\tNoRemove DragDropHandlers\r\n\t\t\t\t{\r\n\t\t\t\t\tForceRemove ShellAnything = s \'{B0D35103-86A1-471C-A653-E130E3439A3B}\'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tNoRemove Drive\r\n\t{\r\n\t\tNoRemove ShellEx\r\n\t\t{\r\n\t\t\tNoRemove C", 200);
      mBuffer.append("ontextMenuHandlers\r\n\t\t\t{\r\n\t\t\t\tForceRemove ShellAnything = s \'{B0D35103-86A1-471C-A653-E130E3439A3B}\'\r\n\t\t\t}\r\n\t\t\tNoRemove DragDropHandlers\r\n\t\t\t{\r\n\t\t\t\tForceRemove ShellAnything = s \'{B0D35103-86A1-471C-A", 200);
      mBuffer.append("653-E130E3439A3B}\'\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nHKLM\r\n{\r\n\tNoRemove Software\r\n\t{\r\n\t\tNoRemove Microsoft\r\n\t\t{\r\n\t\t\tNoRemove Windows\r\n\t\t\t{\r\n\t\t\t\tNoRemove CurrentVersion\r\n\t\t\t\t{\r\n\t\t\t\t\tNoRemove \'Shell Extensions\'\r\n\t\t\t", 200);
      mBuffer.append("\t\t{\r\n\t\t\t\t\t\tNoRemove Approved\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tForceRemove val {B0D35103-86A1-471C-A653-E130E3439A3B} = s \'ShellAnything Class\'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n", 170);
    }
    virtual bool save(const char * iFilename) const
    {
      FILE * f = fopen(iFilename, "wb");
      if (!f) return false;
      size_t fileSize = getSize();
      const char * buffer = getBuffer();
      fwrite(buffer, 1, fileSize, f);
      fclose(f);
      return true;
    }
  private:
    std::string mBuffer;
  };
  const File & getRegistryScriptFile() { static RegistryScriptFile _instance; return _instance; }
}; //bin2cpp
